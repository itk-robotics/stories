<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="memSlideshowTag" type="0" type_size="1" nature="4" stm_value_name="memSlideshowTag" inner="1" tooltip="memSlideshowTag desc" id="4" />
        <Input name="memPostureStand" type="0" type_size="1" nature="4" stm_value_name="memPostureStand" inner="1" tooltip="memPostureStand desc" id="5" />
        <Input name="memHappyAnimation" type="0" type_size="1" nature="4" stm_value_name="memHappyAnimation" inner="1" tooltip="memHappyAnimation desc" id="6" />
        <Input name="memStopBehavior" type="0" type_size="1" nature="4" stm_value_name="memStopBehavior" inner="1" tooltip="memStopBehavior desc" id="7" />
        <Input name="memRandDecimal" type="0" type_size="1" nature="4" stm_value_name="memRandDecimal" inner="1" tooltip="memRandDecimal desc" id="8" />
        <Input name="UserSession/ShouldExitInteractiveActivity" type="0" type_size="1" nature="4" stm_value_name="UserSession/ShouldExitInteractiveActivity" inner="1" tooltip="UserSession/ShouldExitInteractiveActivity desc" id="9" />
        <Input name="ALBasicAwareness/HumanTracked" type="0" type_size="1" nature="4" stm_value_name="ALBasicAwareness/HumanTracked" inner="1" tooltip="ALBasicAwareness/HumanTracked desc" id="10" />
        <Input name="memPavilionAnimation" type="0" type_size="1" nature="4" stm_value_name="memPavilionAnimation" inner="1" tooltip="memPavilionAnimation desc" id="11" />
        <Input name="ALBehaviorManager/BehaviorFailed" type="0" type_size="1" nature="4" stm_value_name="ALBehaviorManager/BehaviorFailed" inner="1" tooltip="ALBehaviorManager/BehaviorFailed desc" id="12" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="13" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                        <Box name="slideshow" id="1" localization="8" tooltip="First draft per email" x="276" y="9">
                            <dialogFile>../slideshow/slideshow.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Slideshow" id="4" localization="8" tooltip="Connect to tablet, load metadata (ImageColl.json)" x="228" y="117">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import os
import sys
import re

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        includePath = self.behaviorAbsolutePath() + '/../lib/PyYAML-3.12/lib'
        if includePath not in sys.path:
            sys.path.insert(1, includePath)
        pass

    def onLoad(self):
        self.memory = self.session().service("ALMemory")
        self.framemanager = self.session().service("ALFrameManager")
        self.slideShow = {}
        slideShowPath = self.behaviorAbsolutePath() + self.getParameter("slideShowPath")
        if os.path.exists(slideShowPath):
            with open (slideShowPath) as input:
                if re.search('\.ya?ml$', slideShowPath):
                    import yaml
                    self.slideShow = yaml.load(input)
                elif re.search('\.json$', slideShowPath):
                    import json
                    self.slideShow = json.load(input)
        self.logger.info("slideShow: " + str(self.slideShow))

    def onUnload(self):
        #uncommented because they might yet cause error when exiting, when .say is still running...
        self.memory = None
        self.slideShow = None

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, url):
        import os
        if not re.match('^[a-z]+://', url):
            url = 'http://%s/apps/%s/%s' %(self._getTabletService().robotIp(), self.packageUid(), url)
        return url

    def onInput_onStart(self, subject):
        self.tts = self.session().service("ALTextToSpeech")
        self.aniTts = self.session().service("ALAnimatedSpeech")

        if subject in self.slideShow:
            slides = self.slideShow[subject]
            from time import sleep
            # We create TabletService here in order to avoid
            # problems with connections and disconnections of the tablet during the life of the application
            tabletService = self._getTabletService()
            if not tabletService:
                self.logger.warning("No ALTabletService, cannot display images.")
                self.onStopped()

            # Preload all images
            for slide in slides:
                if 'image' in slide:
                    try:
                        url = self._getAbsoluteUrl(slide['image'])
                        self.logger.debug('Preloading ' + url)
                        tabletService.preLoadImage(url)
                    except:
                        pass

            for slide in slides:
                self.logger.debug('Slide ' + str(slide));
                if 'image' in slide:
                    try:
                        url = self._getAbsoluteUrl(slide['image'])
                        tabletService.showImage(url)
                    except:
                        pass

                sleep(slide['wait_before'] if 'wait_before' in slide else 1) #wait before talking. Lets human study the image.
                if 'text' in slide:
                    try:
                        self.aniTts.say(slide['text'])
                    except:
                        self.logger.warning("animated-say encountered a problem. Dict.: " + str(slide))
                    else:
                        #execute if try/except succeded
                        try:
                            self.memory.raiseMicroEvent("memPostureStand",1)
                        except:
                            self.logger.info("slideShow box failed to raiseMicroEvent('memPostureStand',1)")
                    sleep(slide['wait_after'] if 'wait_after' in slide else 1) #wait before talking. Lets human study the image.
                else:
                    sleep(slide['wait_after'] if 'wait_after' in slide else 5) #duration of image without speak

            self.logger.info("slideShow complete. Subject: " + subject)

        self.onInput_onStop()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")



    def onInput_onStop(self):
        self.onInput_onHideImage()
        self.onUnload()
        self.onStopped()
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="outputError" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Parameter name="slideShowPath" inherits_from_parent="0" content_type="4" value="/../slideshow.yaml" default_value="/../slideshow.yaml" tooltip="" id="6" />
                        </Box>
                        <Box name="Log" id="2" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="332" y="245">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Fatal" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Say" id="5" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="393" y="209">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " fatal error ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[fatal error]]>
</english>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="happy animation" id="7" localization="8" tooltip="" x="428" y="416">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Choregraphe bezier export in Python.
        self.motion = self.session().service("ALMotion")
        names = []
        times = []
        keys = []


        names.append("HeadPitch")
        times.append([0.8, 0.92, 1.08, 1.24, 1.44, 1.6, 1.76, 1.92, 2.16, 2.32, 2.48, 2.64, 2.84, 3, 3.48])
        keys.append([-0.261799, -0.14802, -0.216196, -0.17832, -0.261799, -0.144232, -0.212408, -0.174533, -0.261799, -0.144232, -0.212408, -0.174533, -0.261799, -0.186331, -0.200952])

        names.append("HeadYaw")
        times.append([0.6, 0.96, 1.6, 2.32, 2.96, 3.48])
        keys.append([-0.0107379, 0.0349066, -0.0349066, 0.0349066, -0.0349066, -0.00306797])

        names.append("HipPitch")
        times.append([0.8, 3.36, 3.48])
        keys.append([-0.176278, -0.0352817, -0.0322137])

        names.append("HipRoll")
        times.append([0.8, 1.44, 2.16, 2.84, 3.36, 3.48])
        keys.append([0.0872665, -0.0872665, 0.0872665, -0.0872665, -0.00153399, 0.00306797])

        names.append("KneePitch")
        times.append([0.8, 3.36, 3.48])
        keys.append([0.0610865, -0.00306797, 0.00613595])

        names.append("LElbowRoll")
        times.append([0.8, 1.12, 1.44, 1.8, 2.16, 2.52, 2.84, 3.16, 3.48])
        keys.append([-0.925025, -0.670206, -1.0664, -0.670206, -0.925025, -0.670206, -1.0664, -0.670206, -0.523087])

        names.append("LElbowYaw")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([-1.10828, -1.75472, -1.10828, -1.75472, -1.23025])

        names.append("LHand")
        times.append([0.8, 1.12, 1.44, 1.8, 2.16, 2.52, 2.84, 3.16, 3.48])
        keys.append([0.020089, 0.34, 0.173538, 0.34, 0.020089, 0.34, 0.173538, 0.34, 0.582601])

        names.append("LShoulderPitch")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([1.31598, 1.77151, 1.31598, 1.77151, 1.56006])

        names.append("LShoulderRoll")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([0.258309, 0.251327, 0.258309, 0.251327, 0.14266])

        names.append("LWristYaw")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([-0.111693, 0.012626, -0.111693, 0.012626, 0.0152981])

        names.append("RElbowRoll")
        times.append([0.8, 1.12, 1.44, 1.8, 2.16, 2.52, 2.84, 3.16, 3.48])
        keys.append([1.0664, 0.694641, 0.925025, 0.694641, 1.0664, 0.694641, 0.925025, 0.694641, 0.523087])

        names.append("RElbowYaw")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([1.75472, 1.10828, 1.75472, 1.10828, 1.22412])

        names.append("RHand")
        times.append([0.8, 1.12, 1.44, 1.8, 2.16, 2.52, 2.84, 3.16, 3.48])
        keys.append([0.173538, 0.29, 0.020089, 0.29, 0.173538, 0.29, 0.020089, 0.29, 0.585237])

        names.append("RShoulderPitch")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([1.77151, 1.31598, 1.77151, 1.31598, 1.55546])

        names.append("RShoulderRoll")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([-0.251327, -0.258309, -0.251327, -0.258309, -0.145728])

        names.append("RWristYaw")
        times.append([0.8, 1.44, 2.16, 2.84, 3.48])
        keys.append([-0.012626, 0.111693, -0.012626, 0.111693, 0.0137641])



        # uncomment the following line and modify the IP if you use this script outside Choregraphe.
        # motion = ALProxy("ALMotion", IP, 9559)

        self.motion.angleInterpolation(names, keys, times, True)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="If &gt;2" id="8" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="916" y="175">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                            <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                            <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                            <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&gt;" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                <Choice value="&lt;" />
                                <Choice value="&lt; or =" />
                                <Choice value="=" />
                                <Choice value="&gt; or =" />
                                <Choice value="&gt;" />
                                <Choice value="≠" />
                            </Parameter>
                            <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="2" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                        </Box>
                        <Box name="Wait" id="9" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="502" y="287">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="random" id="11" localization="8" tooltip="Given a parameter between 0.0-1.0. If the random number is smaller than the parameter then raises event True." x="196" y="368">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self,p):
        from time import sleep
        self.boolResult = None

        self.memory = self.session().service("ALMemory")
        from random import random
        self.rand = random()
        p = float(p)
        #self.logger.info("input to random: " + str(p))
        #self.logger.info("generated random: " + str(self.rand))
        sleep(0.5) #make sure dialog is ready to receive
        if (self.rand < p):
            self.boolResult = True
        else:
            self.boolResult = False

        self.memory.insertData("memRandomBool",self.boolResult)
        self.memory.raiseEvent("memEventRandomDecimal",self.boolResult)
        self.onStopped(self.boolResult)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="facelog" id="12" localization="8" tooltip="" x="154" y="56">
                            <bitmap>media/images/box/interaction/reco_face.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="ALBasicAwareness/HumanTracked" type="0" type_size="1" nature="4" stm_value_name="ALBasicAwareness/HumanTracked" inner="1" tooltip="ALBasicAwareness/HumanTracked desc" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="70.7107">
                                            <Box name="Get Age (1)" id="10" localization="8" tooltip="This box returns the age of the person in front of the robot.&#x0A;The detection fails when there are more or less than one person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. " x="330" y="367">
                                                <bitmap>media/images/box/interaction/age.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.age = 0
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.age = 0
        self.bIsRunning = False
        self.cancelDelays()

    def onInput_onStart(self,p):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)

            self.bIsRunning = True
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user

                        #analyze age properties
                        self.faceC.analyzeFaceCharacteristics(p)
                        time.sleep(0.1)
                        value = ALMemory.getData("PeoplePerception/Person/"+str(p)+"/AgeProperties")
                        if value[1] > self.confidence:
                            self.age += value[0]
                            self.counter += 1
                    except:
                        pass
                else:
                    #calculate mean value
                    self.age /= 4
                    #ANDKRO START
                    self.logList = ALMemory.getData("memFaceLog")
                    if self.logList[0] == p:
                        self.logList[1] = self.age
                        ALMemory.insertData("memFaceLog",self.logList)
                        self.logEvent()
                    #ANDKRO STOP
                    self.onStopped(int(self.age))
                    self.onUnload()
                    return
            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()


    def logEvent(self):
        #if face information is complete, raise event
            _logList = ALMemory.getData("memFaceLog")


            if ((_logList[0] != 0 ) and (_logList[1] != 0.0 ) and (_logList[2] != "")):
                ALMemory.raiseEvent("memFaceLogEvent",_logList)
                #clear log, prep for new entry.
                self.logList = [0,0.0,""]
                ALMemory.insertData("memFaceLog",self.logList)




    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Returns a number between 0 and 75 indicating the age of the person in front of the robot.&#x0A;&#x0A;Tip:&#x0A;Connect this output to If box to compare the age with a defined value" id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when age detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Multiple faces detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                                                <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.35" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="10" default_value="5" min="1" max="60" tooltip="" id="7" />
                                            </Box>
                                            <Box name="Get Gender (1)" id="13" localization="8" tooltip="This box returns the gender of the person in front of the robot.&#x0A;The detection fails when there are more or less than one person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. " x="334" y="290">
                                                <bitmap>media/images/box/interaction/gender.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.gender = 0
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.gender = 0
        self.bIsRunning = False
        self.cancelDelays()

    def onInput_onStart(self,p):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)
            self.bIsRunning = True

            while self.bIsRunning:
                if self.counter < 4:
                    try:

                        #analyze gender properties
                        self.faceC.analyzeFaceCharacteristics(p)
                        time.sleep(0.1)
                        value = ALMemory.getData("PeoplePerception/Person/"+str(p)+"/GenderProperties")
                        if value[1] > self.confidence:
                            self.gender += value[0]
                            self.counter += 1
                    except:
                        pass
                else:
                    #calculate mean value
                    self.gender /= 4
                    if self.gender < 0.5:
                        #*** START
                        self.logList = ALMemory.getData("memFaceLog")
                        if self.logList[0] == p:
                            self.logList[2] = "female"
                            ALMemory.insertData("memFaceLog",self.logList)
                            self.logEvent()
                            #*** STOP

                        self.onStopped("female")
                    else:
                        #*** START
                        self.logList = ALMemory.getData("memFaceLog")
                        if self.logList[0] == p:
                            self.logList[2] = "male"
                            ALMemory.insertData("memFaceLog",self.logList)
                            self.logEvent()
                        #*** STOP
                        self.onStopped("male")
                    self.onUnload()
                    return
            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    #ANDKRO START
    def logEvent(self):
        #if face information is complete, raise event
            _logList = ALMemory.getData("memFaceLog")


            if ((_logList[0] != 0) and (_logList[1] != 0.0 ) and (_logList[2] != "")):
                ALMemory.raiseEvent("memFaceLogEvent",_logList)
                #clear log, prep for new entry.
                self.logList = [0,0.0,""]
                ALMemory.insertData("memFaceLog",self.logList)


    #ANDKRO STOP

    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip='Returns the gender of the person in front of the robot. &#x0A;- &quot;female&quot;&#x0A;- &quot;male&quot;&#x0A;&#x0A;Tip:&#x0A;Connect this output to a &quot;Switch Case&quot; box containing the possible output values as strings. In this way you can trigger different paths in your behavior depending on the output.' id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when gender detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Multiple faces detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" />
                                                <Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0.35" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="10" default_value="5" min="1" max="60" tooltip="" id="7" />
                                            </Box>
                                            <Box name="If" id="15" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="192" y="312">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        self.dynamicInput = p
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then(self.dynamicInput)
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="2" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="3" />
                                                <Output name="output_then" type="0" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="&gt;" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="-1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Box name="initialize ID" id="16" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="156" y="168">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):

        self.memFaceLog = [0,0.0,""]     #[humanID, age, gender]
        self.memory.insertData(self.getParameter("key"), self.memFaceLog)
        self.humanID = self.memory.getData("ALBasicAwareness/HumanTracked")
        self.onStopped(self.humanID)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                                                <Parameter name="key" inherits_from_parent="0" content_type="3" value="memFaceLog" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="memFaceLog HumanID (1)" id="18" localization="8" tooltip="" x="327" y="204">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        self.memory = self.session().service("ALMemory")
        self.value=[0,0.0,""] #[humanID, age, gender]
        self.value[0] = p
        self.memory.insertData("memFaceLog",self.value)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="13" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="10" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                            <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Stop signal" id="22" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="1092" y="232">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="STOP signal" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Warning" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="post_slideshow" id="13" localization="8" tooltip="" x="463" y="116">
                            <dialogFile>../post_slideshow/post_slideshow.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Animated Say (1)" id="16" localization="8" tooltip="Say some text with animations. Note that you must open the box to enter the text." x="904" y="393">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="90" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                <Choice value="disabled" />
                                <Choice value="random" />
                                <Choice value="contextual" />
                            </Parameter>
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Animated Say Text" id="2" localization="8" tooltip="Say the text received on its input and move during its speech." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.animSpeech = ALProxy('ALAnimatedSpeech')

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.animSpeech.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"speakingMovementMode":self.getParameter("Speaking movement mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            self.ids.append(id)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Parameter name="Speaking movement mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                    <Choice value="disabled" />
                                                    <Choice value="random" />
                                                    <Choice value="contextual" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ^start(animations/Stand/Gestures/Hey_1) مرحبا ^wait(animations/Stand/Gestures/Hey_1) ",
			"Czech" : " ^start(animations/Stand/Gestures/Hey_1) Ahoj ^wait(animations/Stand/Gestures/Hey_1) ",
			"Danish" : " ^start(animations/Stand/Gestures/Hey_1) Hej ^wait(animations/Stand/Gestures/Hey_1) ",
			"German" : " ^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1) ",
			"Greek" : "  ",
			"English" : " That is all I have. ",
			"Spanish" : " ^start(animations/Stand/Gestures/Hey_1) Hola ^wait(animations/Stand/Gestures/Hey_1) ",
			"Finnish" : " ^start(animations/Stand/Gestures/Hey_1) Hei ^wait(animations/Stand/Gestures/Hey_1) ",
			"French" : " ^start(animations/Stand/Gestures/Hey_1) Bonjour ^wait(animations/Stand/Gestures/Hey_1) ",
			"Italian" : " ^start(animations/Stand/Gestures/Hey_1) Ciao ^wait(animations/Stand/Gestures/Hey_1) ",
			"Japanese" : " ^start(animations/Stand/Gestures/Hey_1) こんにちは ^wait(animations/Stand/Gestures/Hey_1) ",
			"Korean" : " ^start(animations/Stand/Gestures/Hey_1) 안녕하세요 ^wait(animations/Stand/Gestures/Hey_1) ",
			"Dutch" : " ^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1) ",
			"Norwegian" : "  ",
			"Polish" : " ^start(animations/Stand/Gestures/Hey_1) Cześć ^wait(animations/Stand/Gestures/Hey_1) ",
			"Brazilian" : " ^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1) ",
			"Portuguese" : " ^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1) ",
			"Russian" : " ^start(animations/Stand/Gestures/Hey_1) Привет ^wait(animations/Stand/Gestures/Hey_1) ",
			"Swedish" : " ^start(animations/Stand/Gestures/Hey_1) Hallå ^wait(animations/Stand/Gestures/Hey_1) ",
			"Turkish" : " ^start(animations/Stand/Gestures/Hey_1) Merhaba ^wait(animations/Stand/Gestures/Hey_1) ",
			"Chinese" : " ^start(animations/Stand/Gestures/Hey_1) 你好 ^wait(animations/Stand/Gestures/Hey_1) "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) مرحبا ^wait(animations/Stand/Gestures/Hey_1)]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Ahoj ^wait(animations/Stand/Gestures/Hey_1)]]>
</czech>
                                                    <danish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hej ^wait(animations/Stand/Gestures/Hey_1)]]>
</danish>
                                                    <german>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1)]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[That is all I have.]]>
</english>
                                                    <spanish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hola ^wait(animations/Stand/Gestures/Hey_1)]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hei ^wait(animations/Stand/Gestures/Hey_1)]]>
</finnish>
                                                    <french>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Bonjour ^wait(animations/Stand/Gestures/Hey_1)]]>
</french>
                                                    <italian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Ciao ^wait(animations/Stand/Gestures/Hey_1)]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) こんにちは ^wait(animations/Stand/Gestures/Hey_1)]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) 안녕하세요 ^wait(animations/Stand/Gestures/Hey_1)]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1)]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Cześć ^wait(animations/Stand/Gestures/Hey_1)]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1)]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1)]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Привет ^wait(animations/Stand/Gestures/Hey_1)]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallå ^wait(animations/Stand/Gestures/Hey_1)]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Merhaba ^wait(animations/Stand/Gestures/Hey_1)]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) 你好 ^wait(animations/Stand/Gestures/Hey_1)]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="If -1" id="17" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="916" y="230">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                            <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                            <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                            <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                <Choice value="&lt;" />
                                <Choice value="&lt; or =" />
                                <Choice value="=" />
                                <Choice value="&gt; or =" />
                                <Choice value="&gt;" />
                                <Choice value="≠" />
                            </Parameter>
                            <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="-1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                        </Box>
                        <Box name="picture" id="18" localization="8" tooltip="offer to strike a pose" x="646" y="321">
                            <dialogFile>../picture/picture.dlg</dialogFile>
                            <bitmap>media/images/box/box-dialog.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="755" y="362">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="terminus log" id="15" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="1090" y="403">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Behavior finished. Waiting for human to leave" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Animated Say" id="19" localization="8" tooltip="Say some text with animations. Note that you must open the box to enter the text." x="911" y="67">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                <Choice value="disabled" />
                                <Choice value="random" />
                                <Choice value="contextual" />
                            </Parameter>
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Animated Say Text" id="2" localization="8" tooltip="Say the text received on its input and move during its speech." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.animSpeech = ALProxy('ALAnimatedSpeech')

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.animSpeech.stop(id)
            except:
                pass

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"speakingMovementMode":self.getParameter("Speaking movement mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            self.ids.append(id)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Parameter name="Speaking movement mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                    <Choice value="disabled" />
                                                    <Choice value="random" />
                                                    <Choice value="contextual" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " ^start(animations/Stand/Gestures/Hey_1) مرحبا ^wait(animations/Stand/Gestures/Hey_1) ",
			"Czech" : " ^start(animations/Stand/Gestures/Hey_1) Ahoj ^wait(animations/Stand/Gestures/Hey_1) ",
			"Danish" : " ^start(animations/Stand/Gestures/Hey_1) Hej ^wait(animations/Stand/Gestures/Hey_1) ",
			"German" : " ^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1) ",
			"Greek" : "  ",
			"English" : " ^start(animations/Stand/Gestures/timid) oh ^wait(animations/Stand/Gestures/timid) ",
			"Spanish" : " ^start(animations/Stand/Gestures/Hey_1) Hola ^wait(animations/Stand/Gestures/Hey_1) ",
			"Finnish" : " ^start(animations/Stand/Gestures/Hey_1) Hei ^wait(animations/Stand/Gestures/Hey_1) ",
			"French" : " ^start(animations/Stand/Gestures/Hey_1) Bonjour ^wait(animations/Stand/Gestures/Hey_1) ",
			"Italian" : " ^start(animations/Stand/Gestures/Hey_1) Ciao ^wait(animations/Stand/Gestures/Hey_1) ",
			"Japanese" : " ^start(animations/Stand/Gestures/Hey_1) こんにちは ^wait(animations/Stand/Gestures/Hey_1) ",
			"Korean" : " ^start(animations/Stand/Gestures/Hey_1) 안녕하세요 ^wait(animations/Stand/Gestures/Hey_1) ",
			"Dutch" : " ^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1) ",
			"Norwegian" : "  ",
			"Polish" : " ^start(animations/Stand/Gestures/Hey_1) Cześć ^wait(animations/Stand/Gestures/Hey_1) ",
			"Brazilian" : " ^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1) ",
			"Portuguese" : " ^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1) ",
			"Russian" : " ^start(animations/Stand/Gestures/Hey_1) Привет ^wait(animations/Stand/Gestures/Hey_1) ",
			"Swedish" : " ^start(animations/Stand/Gestures/Hey_1) Hallå ^wait(animations/Stand/Gestures/Hey_1) ",
			"Turkish" : " ^start(animations/Stand/Gestures/Hey_1) Merhaba ^wait(animations/Stand/Gestures/Hey_1) ",
			"Chinese" : " ^start(animations/Stand/Gestures/Hey_1) 你好 ^wait(animations/Stand/Gestures/Hey_1) "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <arabic>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) مرحبا ^wait(animations/Stand/Gestures/Hey_1)]]>
</arabic>
                                                    <czech>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Ahoj ^wait(animations/Stand/Gestures/Hey_1)]]>
</czech>
                                                    <danish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hej ^wait(animations/Stand/Gestures/Hey_1)]]>
</danish>
                                                    <german>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1)]]>
</german>
                                                    <greek>
                                                        <![CDATA[]]>
</greek>
                                                    <english>
                                                        <![CDATA[^start(animations/Stand/Gestures/timid) oh ^wait(animations/Stand/Gestures/timid)]]>
</english>
                                                    <spanish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hola ^wait(animations/Stand/Gestures/Hey_1)]]>
</spanish>
                                                    <finnish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hei ^wait(animations/Stand/Gestures/Hey_1)]]>
</finnish>
                                                    <french>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Bonjour ^wait(animations/Stand/Gestures/Hey_1)]]>
</french>
                                                    <italian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Ciao ^wait(animations/Stand/Gestures/Hey_1)]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) こんにちは ^wait(animations/Stand/Gestures/Hey_1)]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) 안녕하세요 ^wait(animations/Stand/Gestures/Hey_1)]]>
</korean>
                                                    <dutch>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallo ^wait(animations/Stand/Gestures/Hey_1)]]>
</dutch>
                                                    <norwegian>
                                                        <![CDATA[]]>
</norwegian>
                                                    <polish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Cześć ^wait(animations/Stand/Gestures/Hey_1)]]>
</polish>
                                                    <brazilian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1)]]>
</brazilian>
                                                    <portuguese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Olá ^wait(animations/Stand/Gestures/Hey_1)]]>
</portuguese>
                                                    <russian>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Привет ^wait(animations/Stand/Gestures/Hey_1)]]>
</russian>
                                                    <swedish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Hallå ^wait(animations/Stand/Gestures/Hey_1)]]>
</swedish>
                                                    <turkish>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) Merhaba ^wait(animations/Stand/Gestures/Hey_1)]]>
</turkish>
                                                    <chinese>
                                                        <![CDATA[^start(animations/Stand/Gestures/Hey_1) 你好 ^wait(animations/Stand/Gestures/Hey_1)]]>
</chinese>
                                                    <language>5</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="relax arms" id="21" localization="8" tooltip="" x="88" y="158">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        self.motion = self.session().service("ALMotion")
        lAngles = [1.56, 0.14, -1.22, -0.52, -1.016, 0.6]
        rAngles = [1.56, -0.14, 1.22, 0.52, 1.016, 0.6]
        velocity = 0.1

        self.motion.setAngles("LArm", lAngles, velocity)
        self.motion.setAngles("RArm", rAngles, velocity)



    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="showStairs" id="3" localization="8" tooltip="" x="591" y="511">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="63">
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                                    <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                                    <ActuatorCurve name="value" actuator="HipPitch" mute="1" unit="0" />
                                    <ActuatorCurve name="value" actuator="HipRoll" mute="1" unit="0" />
                                    <ActuatorCurve name="value" actuator="KneePitch" mute="1" unit="0" />
                                    <ActuatorCurve name="value" actuator="LElbowRoll" mute="1" unit="0">
                                        <Key frame="13" value="-6.24024" />
                                        <Key frame="34" value="-6.94337" />
                                        <Key frame="42" value="-6.94337" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" mute="1" unit="0">
                                        <Key frame="13" value="-98.5254" />
                                        <Key frame="34" value="-98.5254" />
                                        <Key frame="42" value="-98.5254" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1">
                                        <Key frame="13" value="0.637083" />
                                        <Key frame="34" value="0.637083" />
                                        <Key frame="42" value="0.637083" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" mute="1" unit="0">
                                        <Key frame="13" value="101.162" />
                                        <Key frame="34" value="101.162" />
                                        <Key frame="42" value="101.162" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" mute="1" unit="0">
                                        <Key frame="13" value="3.60351" />
                                        <Key frame="34" value="4.39453" />
                                        <Key frame="42" value="4.39453" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" mute="1" unit="0">
                                        <Key frame="13" value="2.54646" />
                                        <Key frame="34" value="2.54646" />
                                        <Key frame="42" value="2.54646" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="16" value="65.0452" />
                                        <Key frame="43" value="53.6507" />
                                        <Key frame="60" value="38.1348" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="18" value="29.7768" />
                                        <Key frame="45" value="103.72" />
                                        <Key frame="63" value="103.72" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="38" value="0.2" />
                                        <Key frame="59" value="0.919052" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="16" value="29.3555" />
                                        <Key frame="41" value="11.6576" />
                                        <Key frame="59" value="11.6576" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="16" value="-23.0273" />
                                        <Key frame="41" value="-31.2701" />
                                        <Key frame="57" value="-61.8171" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="16" value="-38.3661" />
                                        <Key frame="41" value="58.3661" />
                                        <Key frame="59" value="58.3661" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Log (1)" id="6" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="589" y="8">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="behavior ended" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Disco" id="10" localization="8" tooltip="ID : #04B 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Disco" x="1316" y="320">
                            <bitmap>media/images/box/movement/move.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="412">
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="39" value="-27.3" />
                                        <Key frame="60" value="19.4" />
                                        <Key frame="84" value="-27.3" />
                                        <Key frame="105" value="19.4" />
                                        <Key frame="128" value="-27.3" />
                                        <Key frame="149" value="19.4" />
                                        <Key frame="173" value="-27.3" />
                                        <Key frame="194" value="19.4" />
                                        <Key frame="205" value="3.9" />
                                        <Key frame="222" value="-27.3" />
                                        <Key frame="243" value="19.4" />
                                        <Key frame="267" value="-27.3" />
                                        <Key frame="288" value="19.4" />
                                        <Key frame="311" value="-27.3" />
                                        <Key frame="332" value="19.4" />
                                        <Key frame="356" value="-27.3" />
                                        <Key frame="377" value="19.4" />
                                        <Key frame="407" value="-9.84628" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="39" value="-42.7" />
                                        <Key frame="60" value="2.3554" />
                                        <Key frame="84" value="-42.7" />
                                        <Key frame="105" value="2.3554" />
                                        <Key frame="128" value="-42.7" />
                                        <Key frame="149" value="1.06043" />
                                        <Key frame="173" value="-42.7" />
                                        <Key frame="194" value="16.6" />
                                        <Key frame="205" value="24.3899" />
                                        <Key frame="222" value="42.7" />
                                        <Key frame="243" value="-2.3554" />
                                        <Key frame="267" value="42.7" />
                                        <Key frame="288" value="-2.3554" />
                                        <Key frame="311" value="42.7" />
                                        <Key frame="332" value="-1.06043" />
                                        <Key frame="356" value="42.7" />
                                        <Key frame="377" value="-16.6" />
                                        <Key frame="407" value="0.524941" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0">
                                        <Key frame="19" value="-21.5451" />
                                        <Key frame="39" value="-2.11731" />
                                        <Key frame="60" value="-19.7111" />
                                        <Key frame="84" value="-2.31524" />
                                        <Key frame="105" value="-19.4711" />
                                        <Key frame="128" value="-2.19563" />
                                        <Key frame="149" value="-19.5819" />
                                        <Key frame="173" value="-2.10479" />
                                        <Key frame="194" value="-19.9487" />
                                        <Key frame="222" value="-2.01022" />
                                        <Key frame="243" value="-19.5819" />
                                        <Key frame="267" value="-2.19306" />
                                        <Key frame="288" value="-19.4593" />
                                        <Key frame="311" value="-2.26915" />
                                        <Key frame="332" value="-19.5725" />
                                        <Key frame="356" value="-2.07819" />
                                        <Key frame="377" value="-19.6562" />
                                        <Key frame="407" value="-2.83774" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0">
                                        <Key frame="39" value="0" />
                                        <Key frame="60" value="0" />
                                        <Key frame="84" value="0" />
                                        <Key frame="105" value="0" />
                                        <Key frame="128" value="0" />
                                        <Key frame="149" value="0" />
                                        <Key frame="173" value="0" />
                                        <Key frame="194" value="0" />
                                        <Key frame="222" value="0" />
                                        <Key frame="243" value="0" />
                                        <Key frame="267" value="0" />
                                        <Key frame="288" value="0" />
                                        <Key frame="311" value="0" />
                                        <Key frame="332" value="0" />
                                        <Key frame="356" value="0" />
                                        <Key frame="377" value="0" />
                                        <Key frame="407" value="0" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0">
                                        <Key frame="19" value="9.5664" />
                                        <Key frame="39" value="-0.217285" />
                                        <Key frame="60" value="10.6541" />
                                        <Key frame="84" value="-0.741057" />
                                        <Key frame="105" value="10.3603" />
                                        <Key frame="128" value="-0.183873" />
                                        <Key frame="149" value="10.7163" />
                                        <Key frame="173" value="-0.533559" />
                                        <Key frame="194" value="10.4371" />
                                        <Key frame="222" value="-0.637434" />
                                        <Key frame="243" value="10.7163" />
                                        <Key frame="267" value="-0.391448" />
                                        <Key frame="288" value="10.5677" />
                                        <Key frame="311" value="-0.684319" />
                                        <Key frame="332" value="10.2675" />
                                        <Key frame="356" value="-0.658193" />
                                        <Key frame="377" value="10.7539" />
                                        <Key frame="407" value="-0.754414" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="18" value="-78.6607" />
                                        <Key frame="27" value="-64.7" />
                                        <Key frame="38" value="-21.1795" />
                                        <Key frame="59" value="-11.5993" />
                                        <Key frame="83" value="-21.1795" />
                                        <Key frame="104" value="-11.5993" />
                                        <Key frame="127" value="-21.1795" />
                                        <Key frame="148" value="-11.5993" />
                                        <Key frame="172" value="-21.1795" />
                                        <Key frame="193" value="-11.5993" />
                                        <Key frame="204" value="-47" />
                                        <Key frame="213" value="-13.3528" />
                                        <Key frame="221" value="-7.91266" />
                                        <Key frame="231" value="-75" />
                                        <Key frame="242" value="-14.7682" />
                                        <Key frame="254" value="-83.6" />
                                        <Key frame="266" value="-7.91266" />
                                        <Key frame="276" value="-75" />
                                        <Key frame="287" value="-14.7682" />
                                        <Key frame="299" value="-83.6" />
                                        <Key frame="310" value="-7.91266" />
                                        <Key frame="320" value="-75" />
                                        <Key frame="331" value="-14.7682" />
                                        <Key frame="343" value="-83.6" />
                                        <Key frame="355" value="-7.91266" />
                                        <Key frame="365" value="-75" />
                                        <Key frame="376" value="-14.7682" />
                                        <Key frame="391" value="-56.4" />
                                        <Key frame="406" value="-29.4496" />
                                        <Key frame="411" value="-24.3436" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="18" value="-37.5322" />
                                        <Key frame="38" value="-21.7996" />
                                        <Key frame="59" value="-35.4228" />
                                        <Key frame="83" value="-21.7996" />
                                        <Key frame="104" value="-35.4228" />
                                        <Key frame="127" value="-21.7996" />
                                        <Key frame="148" value="-35.4228" />
                                        <Key frame="172" value="-21.7996" />
                                        <Key frame="193" value="-35.4228" />
                                        <Key frame="204" value="23.5" />
                                        <Key frame="213" value="46.8836" />
                                        <Key frame="221" value="48.7823" />
                                        <Key frame="231" value="4.3" />
                                        <Key frame="242" value="0.090296" />
                                        <Key frame="254" value="26.4" />
                                        <Key frame="266" value="48.7823" />
                                        <Key frame="276" value="4.3" />
                                        <Key frame="287" value="0.090296" />
                                        <Key frame="299" value="26.4" />
                                        <Key frame="310" value="48.7823" />
                                        <Key frame="320" value="4.3" />
                                        <Key frame="331" value="0.090296" />
                                        <Key frame="343" value="26.4" />
                                        <Key frame="355" value="48.7823" />
                                        <Key frame="365" value="4.3" />
                                        <Key frame="376" value="0.090296" />
                                        <Key frame="391" value="-77.1" />
                                        <Key frame="406" value="-70.1779" />
                                        <Key frame="411" value="-69.349" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="18" value="0.2" />
                                        <Key frame="27" value="0.6" />
                                        <Key frame="38" value="0.2648" />
                                        <Key frame="59" value="0.264" />
                                        <Key frame="83" value="0.2648" />
                                        <Key frame="104" value="0.264" />
                                        <Key frame="127" value="0.2648" />
                                        <Key frame="148" value="0.264" />
                                        <Key frame="172" value="0.2648" />
                                        <Key frame="193" value="0.264" />
                                        <Key frame="213" value="0.663802" />
                                        <Key frame="221" value="0.928" />
                                        <Key frame="231" value="0.3" />
                                        <Key frame="242" value="0.0283999" />
                                        <Key frame="254" value="0.75" />
                                        <Key frame="266" value="0.928" />
                                        <Key frame="276" value="0.3" />
                                        <Key frame="287" value="0.0283999" />
                                        <Key frame="299" value="0.75" />
                                        <Key frame="310" value="0.928" />
                                        <Key frame="320" value="0.3" />
                                        <Key frame="331" value="0.0283999" />
                                        <Key frame="343" value="0.75" />
                                        <Key frame="355" value="0.928" />
                                        <Key frame="365" value="0.3" />
                                        <Key frame="376" value="0.5284" />
                                        <Key frame="391" value="0.936396" />
                                        <Key frame="406" value="0.950347" />
                                        <Key frame="411" value="0.2968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="18" value="56.0261" />
                                        <Key frame="38" value="74.2401" />
                                        <Key frame="59" value="80.481" />
                                        <Key frame="83" value="74.2401" />
                                        <Key frame="104" value="80.481" />
                                        <Key frame="127" value="74.2401" />
                                        <Key frame="148" value="80.481" />
                                        <Key frame="172" value="74.2401" />
                                        <Key frame="193" value="80.481" />
                                        <Key frame="204" value="9.9" />
                                        <Key frame="213" value="-60.1055" />
                                        <Key frame="221" value="-68.2895" />
                                        <Key frame="242" value="57.0441" />
                                        <Key frame="266" value="-68.2895" />
                                        <Key frame="287" value="57.0441" />
                                        <Key frame="310" value="-68.2895" />
                                        <Key frame="331" value="57.0441" />
                                        <Key frame="355" value="-68.2895" />
                                        <Key frame="376" value="57.0441" />
                                        <Key frame="411" value="84.2858" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="18" value="28.6506" />
                                        <Key frame="38" value="23.0255" />
                                        <Key frame="59" value="20.3887" />
                                        <Key frame="83" value="23.0255" />
                                        <Key frame="104" value="20.3887" />
                                        <Key frame="127" value="23.0255" />
                                        <Key frame="148" value="20.3887" />
                                        <Key frame="172" value="23.0255" />
                                        <Key frame="193" value="20.3887" />
                                        <Key frame="213" value="50.79" />
                                        <Key frame="221" value="55.3753" />
                                        <Key frame="231" value="70.6641" />
                                        <Key frame="242" value="18.5641" />
                                        <Key frame="254" value="70.6641" />
                                        <Key frame="266" value="55.3753" />
                                        <Key frame="276" value="70.6641" />
                                        <Key frame="287" value="18.5641" />
                                        <Key frame="299" value="70.6641" />
                                        <Key frame="310" value="55.3753" />
                                        <Key frame="320" value="70.6641" />
                                        <Key frame="331" value="18.5641" />
                                        <Key frame="343" value="70.6641" />
                                        <Key frame="355" value="55.3753" />
                                        <Key frame="365" value="70.6641" />
                                        <Key frame="376" value="18.5641" />
                                        <Key frame="391" value="23.3482" />
                                        <Key frame="406" value="8.42198" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="18" value="6.85315" />
                                        <Key frame="27" value="-16.6" />
                                        <Key frame="38" value="-22.6785" />
                                        <Key frame="59" value="-24.0847" />
                                        <Key frame="83" value="-22.6785" />
                                        <Key frame="104" value="-24.0847" />
                                        <Key frame="127" value="-22.6785" />
                                        <Key frame="148" value="-24.0847" />
                                        <Key frame="172" value="-22.6785" />
                                        <Key frame="193" value="-24.0847" />
                                        <Key frame="213" value="-7.04428" />
                                        <Key frame="221" value="-6.15002" />
                                        <Key frame="242" value="-22.9373" />
                                        <Key frame="266" value="-6.15002" />
                                        <Key frame="287" value="-22.9373" />
                                        <Key frame="310" value="-6.15002" />
                                        <Key frame="331" value="-22.9373" />
                                        <Key frame="355" value="-6.15002" />
                                        <Key frame="376" value="-22.9373" />
                                        <Key frame="406" value="0.0212173" />
                                        <Key frame="411" value="4.74374" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="19" value="77.1713" />
                                        <Key frame="28" value="64.2" />
                                        <Key frame="39" value="7.91266" />
                                        <Key frame="49" value="75" />
                                        <Key frame="60" value="14.7682" />
                                        <Key frame="72" value="83.6" />
                                        <Key frame="84" value="7.91266" />
                                        <Key frame="94" value="75" />
                                        <Key frame="105" value="14.7682" />
                                        <Key frame="117" value="83.6" />
                                        <Key frame="128" value="7.91266" />
                                        <Key frame="138" value="75" />
                                        <Key frame="149" value="14.7682" />
                                        <Key frame="161" value="83.6" />
                                        <Key frame="173" value="7.91266" />
                                        <Key frame="183" value="75" />
                                        <Key frame="194" value="14.7682" />
                                        <Key frame="214" value="21.3189" />
                                        <Key frame="222" value="21.1795" />
                                        <Key frame="243" value="11.5993" />
                                        <Key frame="267" value="21.1795" />
                                        <Key frame="288" value="11.5993" />
                                        <Key frame="311" value="21.1795" />
                                        <Key frame="332" value="11.5993" />
                                        <Key frame="356" value="21.1795" />
                                        <Key frame="377" value="11.5993" />
                                        <Key frame="392" value="47.1" />
                                        <Key frame="407" value="29.769" />
                                        <Key frame="412" value="24.6121" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="19" value="34.0996" />
                                        <Key frame="28" value="32.5" />
                                        <Key frame="39" value="-48.7823" />
                                        <Key frame="49" value="-4.3" />
                                        <Key frame="60" value="-0.090296" />
                                        <Key frame="72" value="-26.4" />
                                        <Key frame="84" value="-48.7823" />
                                        <Key frame="94" value="-4.3" />
                                        <Key frame="105" value="-0.090296" />
                                        <Key frame="117" value="-26.4" />
                                        <Key frame="128" value="-48.7823" />
                                        <Key frame="138" value="-4.3" />
                                        <Key frame="149" value="-0.090296" />
                                        <Key frame="161" value="-26.4" />
                                        <Key frame="173" value="-48.7823" />
                                        <Key frame="183" value="-4.3" />
                                        <Key frame="194" value="-0.090296" />
                                        <Key frame="214" value="20.1841" />
                                        <Key frame="222" value="21.7996" />
                                        <Key frame="243" value="35.4228" />
                                        <Key frame="267" value="21.7996" />
                                        <Key frame="288" value="35.4228" />
                                        <Key frame="311" value="21.7996" />
                                        <Key frame="332" value="35.4228" />
                                        <Key frame="356" value="21.7996" />
                                        <Key frame="377" value="35.4228" />
                                        <Key frame="392" value="72.6" />
                                        <Key frame="407" value="70.5493" />
                                        <Key frame="412" value="69.3442" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="19" value="0.2" />
                                        <Key frame="28" value="0.95" />
                                        <Key frame="39" value="0.928" />
                                        <Key frame="49" value="0.3" />
                                        <Key frame="60" value="0.0283999" />
                                        <Key frame="72" value="0.75" />
                                        <Key frame="84" value="0.928" />
                                        <Key frame="94" value="0.3" />
                                        <Key frame="105" value="0.0283999" />
                                        <Key frame="117" value="0.75" />
                                        <Key frame="128" value="0.928" />
                                        <Key frame="138" value="0.3" />
                                        <Key frame="149" value="0.0283999" />
                                        <Key frame="161" value="0.75" />
                                        <Key frame="173" value="0.928" />
                                        <Key frame="183" value="0.3" />
                                        <Key frame="194" value="0.5284" />
                                        <Key frame="214" value="0.271478" />
                                        <Key frame="222" value="0.2648" />
                                        <Key frame="243" value="0.264" />
                                        <Key frame="267" value="0.2648" />
                                        <Key frame="288" value="0.264" />
                                        <Key frame="311" value="0.2648" />
                                        <Key frame="332" value="0.264" />
                                        <Key frame="356" value="0.2648" />
                                        <Key frame="377" value="0.264" />
                                        <Key frame="407" value="0.596785" />
                                        <Key frame="412" value="0.2976" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="19" value="52.4738" />
                                        <Key frame="39" value="-68.2895" />
                                        <Key frame="60" value="57.0441" />
                                        <Key frame="84" value="-68.2895" />
                                        <Key frame="105" value="57.0441" />
                                        <Key frame="128" value="-68.2895" />
                                        <Key frame="149" value="57.0441" />
                                        <Key frame="173" value="-68.2895" />
                                        <Key frame="194" value="57.0441" />
                                        <Key frame="214" value="73.396" />
                                        <Key frame="222" value="74.2401" />
                                        <Key frame="243" value="80.481" />
                                        <Key frame="267" value="74.2401" />
                                        <Key frame="288" value="80.481" />
                                        <Key frame="311" value="74.2401" />
                                        <Key frame="332" value="80.481" />
                                        <Key frame="356" value="74.2401" />
                                        <Key frame="377" value="80.481" />
                                        <Key frame="407" value="84.3785" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="19" value="-51.8597" />
                                        <Key frame="28" value="-74.9641" />
                                        <Key frame="39" value="-55.3753" />
                                        <Key frame="49" value="-70.6641" />
                                        <Key frame="60" value="-18.5641" />
                                        <Key frame="72" value="-70.6641" />
                                        <Key frame="84" value="-55.3753" />
                                        <Key frame="94" value="-70.6641" />
                                        <Key frame="105" value="-18.5641" />
                                        <Key frame="117" value="-70.6641" />
                                        <Key frame="128" value="-55.3753" />
                                        <Key frame="138" value="-70.6641" />
                                        <Key frame="149" value="-18.5641" />
                                        <Key frame="161" value="-70.6641" />
                                        <Key frame="173" value="-55.3753" />
                                        <Key frame="183" value="-70.6641" />
                                        <Key frame="194" value="-18.5641" />
                                        <Key frame="214" value="-22.7677" />
                                        <Key frame="222" value="-23.0255" />
                                        <Key frame="243" value="-20.3887" />
                                        <Key frame="267" value="-23.0255" />
                                        <Key frame="288" value="-20.3887" />
                                        <Key frame="311" value="-23.0255" />
                                        <Key frame="332" value="-20.3887" />
                                        <Key frame="356" value="-23.0255" />
                                        <Key frame="377" value="-20.3887" />
                                        <Key frame="392" value="-17.8" />
                                        <Key frame="412" value="-10" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="19" value="-23.03" />
                                        <Key frame="39" value="6.15002" />
                                        <Key frame="60" value="22.9373" />
                                        <Key frame="84" value="6.15002" />
                                        <Key frame="105" value="22.9373" />
                                        <Key frame="128" value="6.15002" />
                                        <Key frame="149" value="22.9373" />
                                        <Key frame="173" value="6.15002" />
                                        <Key frame="194" value="22.9373" />
                                        <Key frame="214" value="22.4535" />
                                        <Key frame="222" value="22.6785" />
                                        <Key frame="243" value="24.0847" />
                                        <Key frame="267" value="22.6785" />
                                        <Key frame="288" value="24.0847" />
                                        <Key frame="311" value="22.6785" />
                                        <Key frame="332" value="24.0847" />
                                        <Key frame="356" value="22.6785" />
                                        <Key frame="377" value="24.0847" />
                                        <Key frame="407" value="0.287525" />
                                        <Key frame="412" value="6.2379" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                            <Resource name="Standing" type="Lock" timeout="1" />
                            <Resource name="All motors" type="Lock" timeout="1" />
                        </Box>
                        <Box name="failed exiting" id="20" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="445" y="708">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Fatal" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="5" />
                        <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="6" />
                        <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="8" />
                        <Link inputowner="22" indexofinput="2" outputowner="8" indexofoutput="3" />
                        <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="7" />
                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="9" />
                        <Link inputowner="9" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="10" />
                        <Link inputowner="22" indexofinput="2" outputowner="17" indexofoutput="3" />
                        <Link inputowner="18" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="14" indexofinput="2" outputowner="18" indexofoutput="4" />
                        <Link inputowner="16" indexofinput="2" outputowner="14" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="13" outputowner="19" indexofoutput="4" />
                        <Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="5" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="11" />
                        <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="10" indexofinput="2" outputowner="15" indexofoutput="3" />
                        <Link inputowner="0" indexofinput="13" outputowner="10" indexofoutput="4" />
                        <Link inputowner="0" indexofinput="13" outputowner="22" indexofoutput="3" />
                        <Link inputowner="20" indexofinput="2" outputowner="0" indexofoutput="12" />
                        <Link inputowner="0" indexofinput="13" outputowner="20" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
